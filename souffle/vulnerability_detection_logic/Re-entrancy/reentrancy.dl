/* Facts - reentrancy
 * direct_call(c:ProgCounter, a1:EthAddress, a2:EthAddress, p:NatNum)
 * At programme counter, c, contract with address a1 is calling external contract 
 * with address a2 with p Ether.
 * 
 * call(c:ProgCounter, a1:EthAddress, a2:EthAddress, p:IntSet)
 * ibid.
 * 
 * reentrancy(c:ProgCounter, a1:EthAddress, a2:EthAddress, p:IntSet, p2:IntSet)
 * At programme counter, c, the call from contract address a1 to address a2 involved
 * a reentrant callback to the calling contract, address a1.
*/

//types
.number_type ProgCounter	
.symbol_type EthAddress		//Ethereum address for caller and called contracts
.type NatNum = number
.type IntSet = number

.decl direct_call(c:ProgCounter, a1:EthAddress, a2:EthAddress, p:NatNum)
.input direct_call

.decl call(c:ProgCounter, a1:EthAddress, a2:EthAddress, p:IntSet)

.decl reentrancy(c:ProgCounter, a1:EthAddress, a2:EthAddress, p:IntSet, p2:IntSet)
.output reentrancy

call(C, A1, A2, P) :- direct_call(C, A1, A2, P); direct_call(C, A1, A3, P), call(C2, A3, A2, P2).

reentrancy(C, A1, A2, P, P2) :- call(C, A1, A2, P), call(C2, A2, A1, P2), A1 != A2.

